AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Dakobed Rest API Service
Parameters:
  Region:
    Type: String
    Default: us-west-2
  QueueName:
    Type: String
    Default: LibrosaTransformsQueue
  BucketName:
    Type: String
    Default: dakobed-sqs-transform-bucket
  UserUploadTableName:
    Type: String
    Default: UserUploadTable
  DynamoEndpoint:
    Type: String
    Default: cloud
    AllowedValues:
    - http://dynamo-local:8000
    - cloud
    Description: http://dynamo-local:8000, cloud
Resources:
  UploadApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: UploadApi
      StageName: Prod
      DefinitionUri: s3://dakobed-serverless-apis/193ae62cc4c815eaa8b3f72cbce0f9cf
  UserUploadTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Ref: UserUploadTableName
      AttributeDefinitions:
      - AttributeName: user
        AttributeType: S
      - AttributeName: filename
        AttributeType: S
      KeySchema:
      - AttributeName: user
        KeyType: HASH
      - AttributeName: filename
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  S3UploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: BucketName
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: s3:ObjectCreated:*
          Function:
            Fn::GetAtt:
            - VerifyUploadFunction
            - Arn
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - GET
          - PUT
          - HEAD
          - POST
          AllowedOrigins:
          - '*'
  PresignedPostUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 10
      FunctionName: PresignedPostUploadFunction
      Policies:
      - S3CrudPolicy:
          BucketName:
            Ref: BucketName
      - SQSSendMessagePolicy:
          QueueName: InitiateTransformsQueue
      - AWSLambdaBasicExecutionRole
      - DynamoDBReadPolicy:
          TableName: Users
      CodeUri: s3://dakobed-serverless-apis/d646613336bbd07763f3f354ee996458
      Handler: app.lambda_handler
      Runtime: python3.7
      Layers:
      - Fn::ImportValue: upload-authorization-layer-stack:AuthorizationLayer
      Environment:
        Variables:
          UploadBucket:
            Ref: BucketName
          userpool_id:
            Fn::ImportValue: upload-user-stack:UserPool
          app_client_id:
            Fn::ImportValue: upload-user-stack:UserPoolClient
          region:
            Ref: Region
          user_table: Users
      Events:
        UploadApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: UploadApi
            Path: /signedURL
            Method: POST
  ConfigLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - UploadApi
    - PresignedPostUploadFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: PresignedPostUploadFunction
      Principal: apigateway.amazonaws.com
  VerifyUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 10
      FunctionName: VerifyUploadFunction
      CodeUri: s3://dakobed-serverless-apis/ecb37a54d2e9b0244f12fb30534b2182
      Handler: app.lambda_handler
      Environment:
        Variables:
          dynamo_endpoint:
            Ref: DynamoEndpoint
          user_upload_table:
            Ref: UserUploadTableName
          user_table: Users
          transform_queue:
            Ref: QueueName
      Runtime: python3.7
      Role:
        Fn::GetAtt:
        - ProcessingLambdaExecutionRole
        - Arn
  ProcessingLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: VerifyUploadFunction
      Principal: s3.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:s3:::${BucketName}
      SourceAccount:
        Ref: AWS::AccountId
  TransformQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        Ref: QueueName
  SQSQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    DependsOn: TransformQueue
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: '*'
          Action: SQS:SendMessage
          Resource: '*'
          Condition:
            ArnLike:
              aws:SourceArn:
                Fn::GetAtt:
                - VerifyUploadFunction
                - Arn
      Queues:
      - Ref: TransformQueue
  ProcessingLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: dynamo_user_table_policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:Query
            Resource: arn:aws:dynamodb:us-west-2:710339184759:table/Users/index/*
      - PolicyName: dynamo_upload_table_policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            Resource:
              Fn::GetAtt:
              - UserUploadTable
              - Arn
      - PolicyName: allowLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
      - PolicyName: getAndDeleteObjects
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:DeleteObject
            Resource:
              Fn::Sub: arn:aws:s3:::${BucketName}/*
      - PolicyName: sendMessagesQueue
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - sqs:GetQueueAttributes,
            - sqs:SendMessage,
            - sqs:ReceiveMessage,
            - sqs:DeleteMessage,
            - sqs:DeleteMessageBatch,
            - sqs:GetQueueUrl
            - sqs:sendMessage
            Resource:
              Fn::GetAtt:
              - TransformQueue
              - Arn
  DeleteUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 10
      FunctionName: DeleteUploadFunction
      CodeUri: s3://dakobed-serverless-apis/1e2f00d1822a663a060651aa4911f3d7
      Handler: app.lambda_handler
      Environment:
        Variables:
          UploadBucket:
            Ref: BucketName
          userpool_id:
            Fn::ImportValue: upload-user-stack:UserPool
          app_client_id:
            Fn::ImportValue: upload-user-stack:UserPoolClient
          region:
            Ref: Region
          user_table: Users
      Runtime: python3.7
      Layers:
      - Fn::ImportValue: upload-authorization-layer-stack:AuthorizationLayer
      Role:
        Fn::GetAtt:
        - DeleteUploadLambdaExecutionRole
        - Arn
      Events:
        UploadApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: UploadApi
            Path: /upload/{filename}
            Method: DELETE
  DeleteUploadLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: dynamo_user_table_policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:Query
            Resource: arn:aws:dynamodb:us-west-2:710339184759:table/Users/index/*
      - PolicyName: dynamo_upload_table_policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:GetItem
            - dynamodb:DeleteItem
            Resource:
              Fn::GetAtt:
              - UserUploadTable
              - Arn
      - PolicyName: allowLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
      - PolicyName: getAndDeleteObjects
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:DeleteObject
            Resource:
              Fn::Sub: arn:aws:s3:::${BucketName}/*
  DeleteUploadLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - UploadApi
    - DeleteUploadFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: DeleteUploadFunction
      Principal: apigateway.amazonaws.com
  RenameUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 10
      FunctionName: RenameUploadFunction
      CodeUri: s3://dakobed-serverless-apis/1e2f00d1822a663a060651aa4911f3d7
      Handler: app.lambda_handler
      Layers:
      - Fn::ImportValue: upload-authorization-layer-stack:AuthorizationLayer
      Environment:
        Variables:
          dynamo_endpoint:
            Ref: DynamoEndpoint
          user_upload_table:
            Ref: UserUploadTableName
          user_table: Users
      Runtime: python3.7
      Role:
        Fn::GetAtt:
        - RenameUploadLambdaExecutionRole
        - Arn
  RenameUploadLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: dynamo_user_table_policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:Query
            Resource: arn:aws:dynamodb:us-west-2:710339184759:table/Users/index/*
      - PolicyName: dynamo_upload_table_policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:DeleteItem
            Resource:
              Fn::GetAtt:
              - UserUploadTable
              - Arn
      - PolicyName: allowLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
      - PolicyName: getAndDeleteObjects
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:DeleteObject
            Resource:
              Fn::Sub: arn:aws:s3:::${BucketName}/*
Outputs:
  UploadApi:
    Description: API Gateway endpoint URL for Prod stage upload API
    Value:
      Fn::Sub: https://${UploadApi}.execute-api.${AWS::Region}.amazonaws.com/Prod
    Export:
      Name:
        Fn::Join:
        - ':'
        - - Ref: AWS::StackName
          - UploadApi
  S3UploadBucket:
    Description: API Gateway endpoint URL for Prod stage upload API
    Value:
      Ref: BucketName
    Export:
      Name:
        Fn::Join:
        - ':'
        - - Ref: AWS::StackName
          - S3UploadBucket
  UserUploadTable:
    Description: API Gateway endpoint URL for Prod stage upload API
    Value:
      Ref: BucketName
    Export:
      Name:
        Fn::Join:
        - ':'
        - - Ref: AWS::StackName
          - UserUploadTable
