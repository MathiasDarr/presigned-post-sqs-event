AWSTemplateFormatVersion : "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Dakobed Rest API Service

Parameters:
  Region:
    Type: String
    Default: us-west-2
  QueueName:
    Type: String
    Default: LibrosaTransformsQueue
  BucketName:
    Type: String
    Default: dakobed-sqs-transform-bucket

Resources:
  UploadApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: UploadApi
      StageName: Prod
      DefinitionUri: ./swagger.yaml

  PresignedPostUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 10
      FunctionName: PresignedPostUploadFunction
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref BucketName
        - SQSSendMessagePolicy:
            QueueName: InitiateTransformsQueue
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: UserUploads
      CodeUri: handlers/signedURL
      Handler: app.lambda_handler
      Runtime: python3.7

      Layers:
        - !ImportValue upload-authorization-layer-stack:AuthorizationLayer

      Environment:
        Variables:
          UploadBucket: !Ref BucketName
          userpool_id: !ImportValue upload-api-userpool-stack:UserPool
          app_client_id: !ImportValue upload-api-userpool-stack:UserPoolClient
          region: !Ref Region

      Events:
        UploadApi:
          Type: Api
          Properties:
            RestApiId: !Ref UploadApi
            Path: /signedURL
            Method: POST

  ConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - UploadApi
    - PresignedPostUploadFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref PresignedPostUploadFunction
      Principal: apigateway.amazonaws.com


  UserUploadTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: !Sub "${AWS::StackName}-UserUploads"
        AttributeDefinitions:
          -
            AttributeName: "user"
            AttributeType: "S"
          -
            AttributeName: "filename"
            AttributeType: "S"

        KeySchema:
          -
            AttributeName: "user"
            KeyType: "HASH"
          -
            AttributeName: "filename"
            KeyType: "RANGE"

        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

  S3UploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      NotificationConfiguration:
#        QueueConfigurations:
#          - Event: s3:ObjectCreated:Post
#            Queue: !GetAtt TransformQueue.Arn
        LambdaConfigurations:
          - Event: s3:ObjectCreated:Post
            Function: !GetAtt VerifyUploadFunction.Arn

      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
            - "*"
          AllowedMethods:
            - GET
            - PUT
            - HEAD
            - POST
          AllowedOrigins:
            - "*"
            -
  VerifyUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 10
      FunctionName: VerifyUploadFunction
      Policies:
        - SQSSendMessagePolicy:
            QueueName: InitiateTransformsQueue
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref UserUploadTable
      CodeUri: handlers/verify_upload
      Handler: app.lambda_handler
      Runtime: python3.7
      Role: !GetAtt LambdaIAMRole.Arn
      Layers:
        - !ImportValue upload-authorization-layer-stack:AuthorizationLayer

      Environment:
        Variables:
          userpool_id: !ImportValue upload-api-userpool-stack:UserPool
          app_client_id: !ImportValue upload-api-userpool-stack:UserPoolClient
          region: !Ref Region
          user_upload_table: !Ref UserUploadTable

#      Events:
#        UploadApi:
#          Type: Api
#          Properties:
#            RestApiId: !Ref UploadApi
#            Path: /uploads/verify
#            Method: POST



  LambdaIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetBucketNotification'
                  - 's3:PutBucketNotification'
                  - 's3:PostBucketNotification'
                Resource: !Sub 'arn:aws:s3:::${BucketName}'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'




  TransformQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref QueueName

  SQSQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    DependsOn: TransformQueue
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
            Action: SQS:SendMessage
            Resource: "*"
            Condition:
              ArnLike:
                aws:SourceArn: !Sub 'arn:aws:s3:::${BucketName}'
      Queues:
        - !Ref TransformQueue

Outputs:
  UploadApi:
    Description: "API Gateway endpoint URL for Prod stage upload API"
    Value: !Sub "https://${UploadApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/signedURL"
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'UploadApi' ] ]

  S3UploadBucket:
    Description: "API Gateway endpoint URL for Prod stage upload API"
    Value: !Ref BucketName
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'S3UploadBucket' ] ]

  UserUploadTable:
    Description: "API Gateway endpoint URL for Prod stage upload API"
    Value: !Ref UserUploadTable
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'UserUploadTable' ] ]