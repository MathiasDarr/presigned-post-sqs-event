AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Dakobed Rest API Service
Parameters:
  Region:
    Type: String
    Default: us-west-2
  QueueName:
    Type: String
    Default: LibrosaTransformsQueue
  BucketName:
    Type: String
    Default: dakobed-sqs-transform-bucket
Resources:
  UploadApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: UploadApi
      StageName: Prod
      DefinitionUri: s3://dakobed-serverless-apis/1dae8c2e1b633149a48a8b56eae567fe
  PresignedPostUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 10
      FunctionName: PresignedPostUploadFunction
      Policies:
      - S3CrudPolicy:
          BucketName:
            Ref: BucketName
      - SQSSendMessagePolicy:
          QueueName: InitiateTransformsQueue
      - AWSLambdaBasicExecutionRole
      - DynamoDBCrudPolicy:
          TableName: UserUploads
      CodeUri: s3://dakobed-serverless-apis/d8d6d02585aae7801b0a445900a5af24
      Handler: app.lambda_handler
      Runtime: python3.7
      Layers:
      - Fn::ImportValue: upload-authorization-layer-stack:AuthorizationLayer
      Environment:
        Variables:
          UploadBucket:
            Ref: BucketName
          userpool_id:
            Fn::ImportValue: upload-api-userpool-stack:UserPool
          app_client_id:
            Fn::ImportValue: upload-api-userpool-stack:UserPoolClient
          region:
            Ref: Region
      Events:
        UploadApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: UploadApi
            Path: /signedURL
            Method: POST
  ConfigLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - UploadApi
    - PresignedPostUploadFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: PresignedPostUploadFunction
      Principal: apigateway.amazonaws.com
  VerifyUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 10
      FunctionName: VerifyUploadFunction
      Policies:
      - SQSSendMessagePolicy:
          QueueName: InitiateTransformsQueue
      - AWSLambdaBasicExecutionRole
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UserUploadTable
      CodeUri: s3://dakobed-serverless-apis/d8d6d02585aae7801b0a445900a5af24
      Handler: app.lambda_handler
      Runtime: python3.7
      Layers:
      - Fn::ImportValue: upload-authorization-layer-stack:AuthorizationLayer
      Environment:
        Variables:
          userpool_id:
            Fn::ImportValue: upload-api-userpool-stack:UserPool
          app_client_id:
            Fn::ImportValue: upload-api-userpool-stack:UserPoolClient
          region:
            Ref: Region
      Events:
        UploadApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: UploadApi
            Path: /signedURL
            Method: POST
  UserUploadTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: ${AWS::StackName}-UserUploads
      AttributeDefinitions:
      - AttributeName: user
        AttributeType: S
      - AttributeName: filename
        AttributeType: S
      KeySchema:
      - AttributeName: user
        KeyType: HASH
      - AttributeName: filename
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  S3UploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: BucketName
      NotificationConfiguration:
        QueueConfigurations:
        - Event: s3:ObjectCreated:Post
          Queue:
            Fn::GetAtt:
            - TransformQueue
            - Arn
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - GET
          - PUT
          - HEAD
          - POST
          AllowedOrigins:
          - '*'
  TransformQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        Ref: QueueName
  SQSQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    DependsOn: TransformQueue
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: '*'
          Action: SQS:SendMessage
          Resource: '*'
          Condition:
            ArnLike:
              aws:SourceArn:
                Fn::Sub: arn:aws:s3:::${BucketName}
      Queues:
      - Ref: TransformQueue
Outputs:
  UploadApi:
    Description: API Gateway endpoint URL for Prod stage upload API
    Value:
      Fn::Sub: https://${UploadApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/signedURL
    Export:
      Name:
        Fn::Join:
        - ':'
        - - Ref: AWS::StackName
          - UploadApi
  S3UploadBucket:
    Description: API Gateway endpoint URL for Prod stage upload API
    Value:
      Ref: BucketName
    Export:
      Name:
        Fn::Join:
        - ':'
        - - Ref: AWS::StackName
          - S3UploadBucket
  UserUploadTable:
    Description: API Gateway endpoint URL for Prod stage upload API
    Value:
      Ref: UserUploadTable
    Export:
      Name:
        Fn::Join:
        - ':'
        - - Ref: AWS::StackName
          - UserUploadTable
